{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FrappeAPI","text":"<p>Better APIs for Frappe!</p> <p>\u26a0\ufe0f Alert: Beta Version This project is currently in beta. Expect changes and improvements as we work towards a stable release.</p>"},{"location":"#why","title":"Why?","text":"<p>The goal is to build a better API framework for Frappe.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install frappeapi\n</code></pre>"},{"location":"#example","title":"Example","text":"<p>Here's an example of how to use FrappeAPI:</p> <pre><code>from frappeapi import FrappeAPI\n\napp = FrappeAPI()\n\n@app.get()\ndef get_book(isbn: str):\n    book = {\n        \"title\": \"To Kill a Mockingbird\",\n        \"author\": \"Harper Lee\",\n        \"isbn\": \"9780446310789\",\n        \"available\": True\n    }\n    return book\n</code></pre>"},{"location":"openapi_docs/","title":"Setting Up OpenAPI Documentation in Frappe","text":"<p>This guide explains how to set up automatic OpenAPI documentation using Swagger UI in your Frappe application.</p>"},{"location":"openapi_docs/#1-create-portal-page-directory","title":"1. Create Portal Page Directory","text":"<pre><code>mkdir -p templates/pages/docs/\n</code></pre> <p><code>/docs</code> is the directory where the Swagger UI will be served from <code>http://{site}.com/docs</code>. You can change this to any directory you want.</p>"},{"location":"openapi_docs/#2-create-indexhtml-inside-the-docs-directory-add-the-following-code","title":"2. Create <code>index.html</code> inside the <code>docs</code> directory, add the following code:","text":"<pre><code>{% extends \"templates/web.html\" %}\n\n{% block title %} Frappe API {% endblock %}\n\n{%- block header -%}\n&lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Frappe API&lt;/title&gt;\n  &lt;link href=\"https://fonts.googleapis.com/css?family=Open+Sans:400,700|Source+Code+Pro:300,600|Titillium+Web:400,600,700\" rel=\"stylesheet\"&gt;\n  &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/5.9.4/swagger-ui.css\" &gt;\n  &lt;style&gt;\n    html\n    {\n      box-sizing: border-box;\n      overflow: -moz-scrollbars-vertical;\n      overflow-y: scroll;\n    }\n    *,\n    *:before,\n    *:after\n    {\n      box-sizing: inherit;\n    }\n    body {\n      margin:0;\n      background: #fafafa;\n    }\n  &lt;/style&gt;\n{% endblock %}\n\n\n{%- block page_content -%}\n&lt;div id=\"swagger-ui\"&gt;&lt;/div&gt;\n&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/5.9.4/swagger-ui-bundle.js\"&gt; &lt;/script&gt;\n&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/5.9.4/swagger-ui-standalone-preset.js\"&gt; &lt;/script&gt;\n&lt;script&gt;\n  var spec = JSON.parse('{{ data | tojson | safe }}');\n  const ui = SwaggerUIBundle({\n    spec: spec,\n    dom_id: '#swagger-ui',\n    deepLinking: true,\n    presets: [\n      SwaggerUIBundle.presets.apis,\n      SwaggerUIStandalonePreset\n    ],\n    plugins: [\n      SwaggerUIBundle.plugins.DownloadUrl\n    ],\n    layout: \"StandaloneLayout\",\n    requestInterceptor: (request) =&gt; {\n      request.headers['X-Frappe-CSRF-Token'] = frappe.csrf_token;\n      return request;\n    }\n  })\n&lt;/script&gt;\n{% endblock %}\n</code></pre>"},{"location":"openapi_docs/#3-create-indexpy-inside-the-docs-directory-with-the-following-code","title":"3. Create <code>index.py</code> inside the <code>docs</code> directory, with the following code:","text":"<pre><code># import your FrappeAPI app\nfrom your_app.apis import app\n\n# openapi() is a method that returns the auto-generated OpenAPI schema\n# You could add more context to the ctx object to pass additional data to the template\n# For example, you could add a \"title\" or \"description\" to the API docs\ndef get_context(ctx):\n    ctx.data = app.openapi()\n</code></pre>"},{"location":"openapi_docs/#4-access-documentation","title":"4. Access Documentation","text":"<p>After setting up the files:</p> <ol> <li>Restart your Frappe server</li> <li>Access your documentation at: <code>http://your-site/docs</code></li> </ol>"},{"location":"openapi_docs/#notes","title":"Notes","text":"<ul> <li>The documentation will automatically update when you modify your API endpoints</li> <li>The CSRF token is automatically included in API requests through the request interceptor</li> </ul>"},{"location":"roadmap/","title":"Roadmap","text":""},{"location":"roadmap/#frappe-versions","title":"Frappe Versions","text":"<ul> <li> Frappe V14 support</li> <li> Frappe V15 support</li> </ul>"},{"location":"roadmap/#methods","title":"Methods","text":"<ul> <li> Implement <code>app.get(...)</code> method.</li> <li> Implement <code>app.post(...)</code> method.</li> <li> Implement <code>app.put(...)</code> method.</li> <li> Implement <code>app.patch(...)</code> method</li> <li> Implement <code>app.delete(...)</code> method</li> </ul>"},{"location":"roadmap/#query-parameter-features","title":"Query Parameter Features","text":"<ul> <li> Automatic query parameter parsing/conversion based on type hints.</li> <li> Required query parameters <code>needy: str</code>.</li> <li> Required query parameters with Ellipsis <code>...</code>. See Pydantic Required Fields and FastAPI Required with Ellipsis.</li> <li> Optional query parameters with default values <code>skip: int = 0</code>.</li> <li> Optional query parameters without default values <code>limit: Union[int, None] = None</code>.</li> <li> Enum support for query parameters path parameters - predefined values.</li> <li> Boolean query parameters <code>is_admin: bool = False</code>. see Pydantic's Boolean type.</li> <li> List query parameters (i.e. a query parameter q that can appear multiple times in the URL, e.g. <code>?q=foo&amp;q=bar</code>)</li> <li> Aliases for query parameters. <code>q: str = Query(alias=\"query\")</code></li> <li> Query parameters as Pydantic model. <code>filters: Filter</code>. See Query Parameter Models</li> <li> Automatic Documentation generation for query parameters.</li> </ul>"},{"location":"roadmap/#body-parameter-features","title":"Body Parameter Features","text":"<ul> <li> Body parameter as Pydantic model. <code>item: Item</code></li> <li> Multiple body parameters. <code>item: Item, user: User</code>, resulting in <code>{\"item\": {\"name\": \"foo\"}, \"user\": {\"name\": \"bar\"}}</code></li> <li> Singular values in body, defined as <code>Body()</code>. <code>name: str = Body()</code> so that to not conflict with query parameters.</li> <li> Special <code>embed</code> Body parameter. See Embed a single body parameter</li> <li> Nested Models for body parameters.</li> <li> Automatic body parameter parsing/conversion based on type hints.</li> </ul>"},{"location":"roadmap/#header-parameters","title":"Header Parameters","text":"<ul> <li> Support header parameters like FastAPI did. See Header Parameters</li> <li> Header parameters as Pydantic model. See Header Parameter Models</li> <li> Duplicate header parameters.</li> <li> Ability to forbid extra headers. <code>model_config={\"extra\": \"forbid\"}</code></li> </ul>"},{"location":"roadmap/#cookie-parameters","title":"Cookie Parameters","text":"<ul> <li> Support cookie parameters like FastAPI did.</li> </ul>"},{"location":"roadmap/#form-data","title":"Form Data","text":"<ul> <li> Define form field as <code>Form()</code>. <code>name: str = Form()</code>.</li> <li> Multiple form fields. <code>name: str = Form(), age: int = Form()</code></li> <li> Form data as Pydantic model. <code>data: Data</code></li> <li> Ability to forbid extra form fields. <code>model_config={\"extra\": \"forbid\"}</code></li> </ul>"},{"location":"roadmap/#file-uploads","title":"File Uploads","text":"<ul> <li> Define file upload field as <code>File()</code>. <code>file: Annotated[bytes, File()]</code>, FrappeAPI will read the file for you and you will receive the contents as bytes with file-like interface. This means that the whole contents will be stored in memory. This will work well for small files.</li> <li> <code>UploadFile</code> for large files. <code>file: UploadFile</code>. Uses <code>tempfile.SpooledTemporaryFile</code> to store the file contents in memory or disk depending on the size. You get a file-like interface with the file contents streamed from the client to the server. <code>UploadFile</code> is FastAPI's, it supports async file handling, but FrappeAPI does not yet support async APIs, fortunately, <code>UploadFile</code> has <code>file</code> attribute to access the raw standard Python file (blocking, not async), useful and needed for non-async code.</li> <li> Optional file upload field. <code>file: Annotated[bytes | None, File()] = None</code></li> <li> Optional <code>UploadFile</code> field. <code>file: UploadFile | None = None</code></li> <li> Multiple file upload fields. <code>files: Annotated[list[bytes], File()]</code></li> <li> Multiple <code>UploadFile</code> fields. <code>files: list[UploadFile]</code></li> </ul>"},{"location":"roadmap/#handling-errors","title":"Handling Errors","text":"<ul> <li> HTTPException</li> <li> RequestValidationError</li> <li> ResponseValidationError</li> <li> Register custom exception handlers. See Add custom headers</li> <li> Override default exception handlers.</li> <li> Maintain Frappe Transaction Management.</li> </ul>"},{"location":"roadmap/#response-models","title":"Response Models","text":"<ul> <li> Method <code>response_model</code> parameter to define response model as Pydantic model. <code>response_model=Model</code>, <code>response_model=list[Model]</code> ...etc</li> <li> Response model as return type with standard type hints or Pydantic model. <code>-&gt; Model</code>, <code>-&gt; list[Model]</code>...etc</li> <li> Limit and filter the output data to what is defined in the return type.</li> <li> <code>response_model</code> parameter takes precedence over return type if both are provided.</li> </ul>"},{"location":"roadmap/#additional-information-and-validation-fields","title":"Additional information and validation fields","text":"<ul> <li> String validations, <code>min_length</code>, <code>max_length</code>, <code>pattern</code>.</li> <li> Numeric validations, <code>gt</code>, <code>ge</code>, <code>lt</code>, <code>le</code>.</li> <li> Metadata, <code>title</code>, <code>description</code>, <code>deprecated</code>.</li> <li> others, <code>include_in_schema</code>.</li> </ul>"},{"location":"roadmap/#rate-limiting","title":"Rate Limiting","text":"<ul> <li> Support for rate limiting.</li> </ul>"},{"location":"roadmap/#dependencies","title":"Dependencies","text":"<ul> <li> Support for dependencies.</li> </ul>"},{"location":"roadmap/#middleware","title":"Middleware","text":"<ul> <li> Support for middleware.</li> </ul>"},{"location":"roadmap/#miscellaneous","title":"Miscellaneous","text":"<ul> <li> Debugging capabilities.</li> </ul>"},{"location":"roadmap/#related-frappe-prs-and-issues","title":"Related Frappe PRs and Issues","text":"<ul> <li>PR #23135: Introducing type hints for API functions.</li> <li>PR #22300: Enhancing <code>frappe.whitelist()</code> functionality.</li> <li>PR #19029: Efforts to improve type safety in Frappe.</li> <li>Issue #14905: Discussion on improving API documentation.</li> </ul>"}]}