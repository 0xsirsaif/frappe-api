{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FrappeAPI","text":"<p>Better APIs for Frappe!</p> <p>\u26a0\ufe0f Alert: Beta Version This project is currently in beta. Expect changes and improvements as we work towards a stable release.</p>"},{"location":"#why","title":"Why?","text":"<p>The goal is to build a better API framework for Frappe.</p> <p>FrappeAPI follows FastAPI's interface and semantics. For in-depth information about specific features, you can refer to FastAPI's documentation.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install frappeapi\n</code></pre>"},{"location":"openapi_docs/","title":"Setting Up OpenAPI Documentation in Frappe","text":"<p>This guide explains how to set up automatic OpenAPI documentation using Swagger UI in your Frappe application.</p>"},{"location":"openapi_docs/#1-create-portal-page-directory","title":"1. Create Portal Page Directory","text":"<pre><code>mkdir -p templates/pages/docs/\n</code></pre> <p><code>/docs</code> is the directory where the Swagger UI will be served from <code>http://{site}.com/docs</code>. You can change this to any directory you want.</p>"},{"location":"openapi_docs/#2-create-indexhtml-inside-the-docs-directory-add-the-following-code","title":"2. Create <code>index.html</code> inside the <code>docs</code> directory, add the following code:","text":"<pre><code>{% extends \"templates/web.html\" %}\n\n{% block title %} Frappe API {% endblock %}\n\n{%- block header -%}\n&lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Frappe API&lt;/title&gt;\n  &lt;link href=\"https://fonts.googleapis.com/css?family=Open+Sans:400,700|Source+Code+Pro:300,600|Titillium+Web:400,600,700\" rel=\"stylesheet\"&gt;\n  &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/5.9.4/swagger-ui.css\" &gt;\n  &lt;style&gt;\n    html\n    {\n      box-sizing: border-box;\n      overflow: -moz-scrollbars-vertical;\n      overflow-y: scroll;\n    }\n    *,\n    *:before,\n    *:after\n    {\n      box-sizing: inherit;\n    }\n    body {\n      margin:0;\n      background: #fafafa;\n    }\n  &lt;/style&gt;\n{% endblock %}\n\n\n{%- block page_content -%}\n&lt;div id=\"swagger-ui\"&gt;&lt;/div&gt;\n&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/5.9.4/swagger-ui-bundle.js\"&gt; &lt;/script&gt;\n&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/5.9.4/swagger-ui-standalone-preset.js\"&gt; &lt;/script&gt;\n&lt;script&gt;\n  var spec = JSON.parse('{{ data | tojson | safe }}');\n  const ui = SwaggerUIBundle({\n    spec: spec,\n    dom_id: '#swagger-ui',\n    deepLinking: true,\n    presets: [\n      SwaggerUIBundle.presets.apis,\n      SwaggerUIStandalonePreset\n    ],\n    plugins: [\n      SwaggerUIBundle.plugins.DownloadUrl\n    ],\n    layout: \"StandaloneLayout\",\n    requestInterceptor: (request) =&gt; {\n      request.headers['X-Frappe-CSRF-Token'] = frappe.csrf_token;\n      return request;\n    }\n  })\n&lt;/script&gt;\n{% endblock %}\n</code></pre>"},{"location":"openapi_docs/#3-create-indexpy-inside-the-docs-directory-with-the-following-code","title":"3. Create <code>index.py</code> inside the <code>docs</code> directory, with the following code:","text":"<pre><code># import your FrappeAPI app\nfrom your_app.apis import app\n\n# openapi() is a method that returns the auto-generated OpenAPI schema\n# You could add more context to the ctx object to pass additional data to the template\n# For example, you could add a \"title\" or \"description\" to the API docs\ndef get_context(ctx):\n    ctx.data = app.openapi()\n</code></pre>"},{"location":"openapi_docs/#4-access-documentation","title":"4. Access Documentation","text":"<p>After setting up the files:</p> <ol> <li>Restart your Frappe server</li> <li>Access your documentation at: <code>http://your-site/docs</code></li> </ol>"},{"location":"openapi_docs/#notes","title":"Notes","text":"<ul> <li>The documentation will automatically update when you modify your API endpoints</li> <li>The CSRF token is automatically included in API requests through the request interceptor</li> </ul>"},{"location":"roadmap/","title":"Roadmap","text":""},{"location":"roadmap/#frappe-versions","title":"Frappe Versions","text":"<ul> <li> Frappe V14 support</li> <li> Frappe V15 support</li> </ul>"},{"location":"roadmap/#methods","title":"Methods","text":"<ul> <li> Implement <code>app.get(...)</code> method.</li> <li> Implement <code>app.post(...)</code> method.</li> <li> Implement <code>app.put(...)</code> method.</li> <li> Implement <code>app.patch(...)</code> method</li> <li> Implement <code>app.delete(...)</code> method</li> </ul>"},{"location":"roadmap/#query-parameter-features","title":"Query Parameter Features","text":"<ul> <li> Automatic query parameter parsing/conversion based on type hints.</li> <li> Required query parameters <code>needy: str</code>.</li> <li> Required query parameters with Ellipsis <code>...</code>. See Pydantic Required Fields and FastAPI Required with Ellipsis.</li> <li> Optional query parameters with default values <code>skip: int = 0</code>.</li> <li> Optional query parameters without default values <code>limit: Union[int, None] = None</code>.</li> <li> Enum support for query parameters path parameters - predefined values.</li> <li> Boolean query parameters <code>is_admin: bool = False</code>. see Pydantic's Boolean type.</li> <li> List query parameters (i.e. a query parameter q that can appear multiple times in the URL, e.g. <code>?q=foo&amp;q=bar</code>)</li> <li> Aliases for query parameters. <code>q: str = Query(alias=\"query\")</code></li> <li> Query parameters as Pydantic model. <code>filters: Filter</code>. See Query Parameter Models</li> <li> Automatic Documentation generation for query parameters.</li> </ul>"},{"location":"roadmap/#body-parameter-features","title":"Body Parameter Features","text":"<ul> <li> Body parameter as Pydantic model. <code>item: Item</code></li> <li> Multiple body parameters. <code>item: Item, user: User</code>, resulting in <code>{\"item\": {\"name\": \"foo\"}, \"user\": {\"name\": \"bar\"}}</code></li> <li> Singular values in body, defined as <code>Body()</code>. <code>name: str = Body()</code> so that to not conflict with query parameters.</li> <li> Special <code>embed</code> Body parameter. See Embed a single body parameter</li> <li> Nested Models for body parameters.</li> <li> Automatic body parameter parsing/conversion based on type hints.</li> </ul>"},{"location":"roadmap/#header-parameters","title":"Header Parameters","text":"<ul> <li> Support header parameters like FastAPI did. See Header Parameters</li> <li> Header parameters as Pydantic model. See Header Parameter Models</li> <li> Duplicate header parameters.</li> <li> Ability to forbid extra headers. <code>model_config={\"extra\": \"forbid\"}</code></li> </ul>"},{"location":"roadmap/#cookie-parameters","title":"Cookie Parameters","text":"<ul> <li> Support cookie parameters like FastAPI did.</li> </ul>"},{"location":"roadmap/#form-data","title":"Form Data","text":"<ul> <li> Define form field as <code>Form()</code>. <code>name: str = Form()</code>.</li> <li> Multiple form fields. <code>name: str = Form(), age: int = Form()</code></li> <li> Form data as Pydantic model. <code>data: Data</code></li> <li> Ability to forbid extra form fields. <code>model_config={\"extra\": \"forbid\"}</code></li> </ul>"},{"location":"roadmap/#file-uploads","title":"File Uploads","text":"<ul> <li> Define file upload field as <code>File()</code>. <code>file: Annotated[bytes, File()]</code>, FrappeAPI will read the file for you and you will receive the contents as bytes with file-like interface. This means that the whole contents will be stored in memory. This will work well for small files.</li> <li> <code>UploadFile</code> for large files. <code>file: UploadFile</code>. Uses <code>tempfile.SpooledTemporaryFile</code> to store the file contents in memory or disk depending on the size. You get a file-like interface with the file contents streamed from the client to the server. <code>UploadFile</code> is FastAPI's, it supports async file handling, but FrappeAPI does not yet support async APIs, fortunately, <code>UploadFile</code> has <code>file</code> attribute to access the raw standard Python file (blocking, not async), useful and needed for non-async code.</li> <li> Optional file upload field. <code>file: Annotated[bytes | None, File()] = None</code></li> <li> Optional <code>UploadFile</code> field. <code>file: UploadFile | None = None</code></li> <li> Multiple file upload fields. <code>files: Annotated[list[bytes], File()]</code></li> <li> Multiple <code>UploadFile</code> fields. <code>files: list[UploadFile]</code></li> </ul>"},{"location":"roadmap/#handling-errors","title":"Handling Errors","text":"<ul> <li> HTTPException</li> <li> RequestValidationError</li> <li> ResponseValidationError</li> <li> Register custom exception handlers. See Add custom headers</li> <li> Override default exception handlers.</li> <li> Maintain Frappe Transaction Management.</li> </ul>"},{"location":"roadmap/#response-models","title":"Response Models","text":"<ul> <li> Method <code>response_model</code> parameter to define response model as Pydantic model. <code>response_model=Model</code>, <code>response_model=list[Model]</code> ...etc</li> <li> Response model as return type with standard type hints or Pydantic model. <code>-&gt; Model</code>, <code>-&gt; list[Model]</code>...etc</li> <li> Limit and filter the output data to what is defined in the return type.</li> <li> <code>response_model</code> parameter takes precedence over return type if both are provided.</li> </ul>"},{"location":"roadmap/#additional-information-and-validation-fields","title":"Additional information and validation fields","text":"<ul> <li> String validations, <code>min_length</code>, <code>max_length</code>, <code>pattern</code>.</li> <li> Numeric validations, <code>gt</code>, <code>ge</code>, <code>lt</code>, <code>le</code>.</li> <li> Metadata, <code>title</code>, <code>description</code>.</li> <li> others, <code>include_in_schema</code>.</li> <li> <code>deprecated</code></li> </ul>"},{"location":"roadmap/#response-model-features","title":"Response Model Features","text":"<ul> <li> Method <code>response_model</code> parameter to define response model as Pydantic model. <code>response_model=Model</code>, <code>response_model=list[Model]</code> ...etc</li> <li> Response model as return type with standard type hints or Pydantic model. <code>-&gt; Model</code>, <code>-&gt; list[Model]</code>...etc</li> <li> Limit and filter the output data to what is defined in the return type.</li> <li> <code>response_model</code> parameter takes precedence over return type if both are provided.</li> <li> <code>response_model_include</code> to include only specific fields in response</li> <li> <code>response_model_exclude</code> to exclude specific fields from response</li> <li> <code>response_model_by_alias</code> to control whether to use field aliases in response</li> <li> <code>response_model_exclude_unset</code> to exclude unset fields from response</li> <li> <code>response_model_exclude_defaults</code> to exclude fields with default values from response</li> <li> <code>response_model_exclude_none</code> to exclude None fields from response</li> <li> Support for Union response models (multiple possible response types)</li> </ul>"},{"location":"roadmap/#rate-limiting","title":"Rate Limiting","text":"<ul> <li> Support for rate limiting.</li> </ul>"},{"location":"roadmap/#dependencies","title":"Dependencies","text":"<ul> <li> Support for dependencies.</li> </ul>"},{"location":"roadmap/#middleware","title":"Middleware","text":"<ul> <li> Support for middleware.</li> </ul>"},{"location":"roadmap/#miscellaneous","title":"Miscellaneous","text":"<ul> <li> Debugging capabilities.</li> </ul>"},{"location":"roadmap/#related-frappe-prs-and-issues","title":"Related Frappe PRs and Issues","text":"<ul> <li>PR #23135: Introducing type hints for API functions.</li> <li>PR #22300: Enhancing <code>frappe.whitelist()</code> functionality.</li> <li>PR #19029: Efforts to improve type safety in Frappe.</li> <li>Issue #14905: Discussion on improving API documentation.</li> </ul>"},{"location":"usage_examples/","title":"Usage Examples","text":"<p>Note: FrappeAPI follows FastAPI's interface and semantics. For in-depth information about specific features, you can refer to FastAPI's documentation.</p>"},{"location":"usage_examples/#query-parameters","title":"Query Parameters","text":"<p>FrappeAPI provides rich support for query parameters with automatic validation and documentation. Here are examples of different query parameter features:</p>"},{"location":"usage_examples/#1-automatic-type-parsing","title":"1. Automatic Type Parsing","text":"<p>Query parameters are automatically parsed based on type hints:</p> <pre><code>@app.get()\ndef get_product_details(\n    product_id: int,\n    unit_price: float,\n    in_stock: bool\n):\n    return {\n        \"product_id\": product_id,  # \"123\" -&gt; 123\n        \"unit_price\": unit_price,  # \"9.99\" -&gt; 9.99\n        \"in_stock\": in_stock      # \"true\" -&gt; True\n    }\n# GET https://example.com/api/method/my_app.api.v1.get_product_details?product_id=123&amp;unit_price=9.99&amp;in_stock=true\n# Response: {\"product_id\": 123, \"unit_price\": 9.99, \"in_stock\": true}\n</code></pre>"},{"location":"usage_examples/#2-required-parameters","title":"2. Required Parameters","text":"<p>You can specify required parameters in different ways:</p> <pre><code>@app.get()\ndef get_user_profile(\n    user_id: str,           # Required by default\n    include_photo: str = ... # Required using Ellipsis\n):\n    return {\n        \"user_id\": user_id,\n        \"include_photo\": include_photo\n    }\n# GET https://example.com/api/method/my_app.api.v1.get_user_profile?user_id=USR001&amp;include_photo=true\n# Response: {\"user_id\": \"USR001\", \"include_photo\": \"true\"}\n</code></pre>"},{"location":"usage_examples/#3-optional-parameters","title":"3. Optional Parameters","text":"<p>Optional parameters can have default values or be nullable:</p> <pre><code>@app.get()\ndef list_products(\n    category: str = \"all\",        # Optional with default\n    page: int = 1,                # Optional with default\n    search: str | None = None     # Optional without default\n):\n    return {\n        \"category\": category,\n        \"page\": page,\n        \"search\": search\n    }\n# GET https://example.com/api/method/my_app.api.v1.list_products?category=electronics&amp;page=2&amp;search=laptop\n# Response: {\"category\": \"electronics\", \"page\": 2, \"search\": \"laptop\"}\n# GET https://example.com/api/method/my_app.api.v1.list_products\n# Response: {\"category\": \"all\", \"page\": 1, \"search\": null}\n</code></pre>"},{"location":"usage_examples/#4-enum-parameters","title":"4. Enum Parameters","text":"<p>Use enums for parameters with predefined values:</p> <pre><code>from enum import Enum\n\nclass OrderStatus(str, Enum):\n    pending = \"pending\"\n    processing = \"processing\"\n    completed = \"completed\"\n    cancelled = \"cancelled\"\n\n@app.get()\ndef list_orders(\n    status: OrderStatus = OrderStatus.pending,  # Enum with default\n    sort_by: Literal[\"date\", \"status\"] = \"date\" # Literal for fixed values\n):\n    return {\n        \"status\": status,\n        \"sort_by\": sort_by\n    }\n# GET https://example.com/api/method/my_app.api.v1.list_orders?status=processing&amp;sort_by=status\n# Response: {\"status\": \"processing\", \"sort_by\": \"status\"}\n# GET https://example.com/api/method/my_app.api.v1.list_orders\n# Response: {\"status\": \"pending\", \"sort_by\": \"date\"}\n</code></pre>"},{"location":"usage_examples/#5-boolean-parameters","title":"5. Boolean Parameters","text":"<p>Boolean parameters support multiple formats:</p> <pre><code>@app.get()\ndef filter_items(\n    in_stock: bool = True,     # Accepts: true/1/yes/on\n    is_featured: bool = False  # Accepts: false/0/no/off\n):\n    return {\n        \"in_stock\": in_stock,       # \"yes\" -&gt; True\n        \"is_featured\": is_featured  # \"0\" -&gt; False\n    }\n# GET https://example.com/api/method/my_app.api.v1.filter_items?in_stock=yes&amp;is_featured=0\n# Response: {\"in_stock\": true, \"is_featured\": false}\n# GET https://example.com/api/method/my_app.api.v1.filter_items?in_stock=1&amp;is_featured=no\n# Response: {\"in_stock\": true, \"is_featured\": false}\n</code></pre>"},{"location":"usage_examples/#6-list-parameters","title":"6. List Parameters","text":"<p>Handle parameters that can appear multiple times in the URL:</p> <pre><code>@app.get()\ndef search_products(\n    tags: List[str] = Query(default=[]),      # Multiple string values\n    categories: List[int] = Query(default=[])  # Multiple integer values\n):\n    return {\n        \"tags\": tags,           \n        \"categories\": categories \n    }\n# GET https://example.com/api/method/my_app.api.v1.search_products?tags=electronics&amp;tags=sale&amp;categories=1&amp;categories=2\n# Response: {\"tags\": [\"electronics\", \"sale\"], \"categories\": [1, 2]}\n</code></pre>"},{"location":"usage_examples/#7-aliased-parameters","title":"7. Aliased Parameters","text":"<p>Use different parameter names in the URL:</p> <pre><code>@app.get()\ndef search_items(\n    search_text: Annotated[str, Query(alias=\"q\")] = \"\",     # Use as ?q=value\n    page_number: Annotated[int, Query(alias=\"p\")] = 1,      # Use as ?p=2\n    items_per_page: Annotated[int, Query(alias=\"size\")] = 10 # Use as ?size=20\n):\n    return {\n        \"search\": search_text,\n        \"page\": page_number,\n        \"per_page\": items_per_page\n    }\n# GET https://example.com/api/method/my_app.api.v1.search_items?q=laptop&amp;p=2&amp;size=20\n# Response: {\"search\": \"laptop\", \"page\": 2, \"per_page\": 20}\n</code></pre>"},{"location":"usage_examples/#8-query-parameter-models","title":"8. Query Parameter Models","text":"<p>Group related parameters using Pydantic models:</p> <pre><code>from pydantic import BaseModel, Field\nfrom typing import List\n\nclass ProductFilter(BaseModel):\n    search: str | None = None\n    category: str = \"all\"\n    min_price: float = Field(0, ge=0)\n    max_price: float | None = None\n    tags: List[str] = []\n    in_stock: bool = True\n    sort_by: Literal[\"price\", \"name\", \"date\"] = \"date\"\n\n@app.get()\ndef filter_products(\n    filters: Annotated[ProductFilter, Query()]\n):\n    return filters\n# GET https://example.com/api/method/my_app.api.v1.filter_products?search=laptop&amp;category=electronics&amp;min_price=100&amp;tags=new&amp;tags=sale\n# Response: {\n#     \"search\": \"laptop\",\n#     \"category\": \"electronics\",\n#     \"min_price\": 100.0,\n#     \"max_price\": null,\n#     \"tags\": [\"new\", \"sale\"],\n#     \"in_stock\": true,\n#     \"sort_by\": \"date\"\n# }\n</code></pre>"},{"location":"usage_examples/#9-documented-parameters","title":"9. Documented Parameters","text":"<p>Add metadata for automatic documentation generation:</p> <pre><code>@app.get()\ndef search_catalog(\n    q: Annotated[\n        str, \n        Query(\n            title=\"Search Query\",\n            description=\"Text to search for in product catalog\",\n            min_length=2,\n            max_length=50,\n            example=\"laptop\"\n        )\n    ] = \"\",\n    category: Annotated[\n        str,\n        Query(\n            title=\"Category Filter\",\n            description=\"Filter results by product category\",\n            example=\"electronics\"\n        )\n    ] = \"all\"\n):\n    return {\"query\": q, \"category\": category}\n# GET https://example.com/api/method/my_app.api.v1.search_catalog?q=laptop&amp;category=electronics\n# Response: {\"query\": \"laptop\", \"category\": \"electronics\"}\n</code></pre>"},{"location":"usage_examples/#request-body-parameters","title":"Request Body Parameters","text":"<p>FrappeAPI supports various ways to handle request body data. Here are examples of different body parameter features:</p>"},{"location":"usage_examples/#1-single-model-body","title":"1. Single Model Body","text":"<p>Use Pydantic models to validate request body:</p> <pre><code>from pydantic import BaseModel, Field\n\nclass Item(BaseModel):\n    name: str = Field(..., min_length=1, max_length=50)\n    description: str | None = None\n    price: float = Field(..., gt=0)\n    tax: float | None = None\n\n@app.post()\ndef create_item(item: Item):\n    return item\n# POST https://example.com/api/method/my_app.api.v1.create_item\n# Request Body:\n# {\n#     \"name\": \"Laptop\",\n#     \"description\": \"High-performance laptop\",\n#     \"price\": 999.99,\n#     \"tax\": 79.99\n# }\n# Response: Same as request body\n</code></pre>"},{"location":"usage_examples/#2-multiple-body-parameters","title":"2. Multiple Body Parameters","text":"<p>Handle multiple body parameters:</p> <pre><code>class User(BaseModel):\n    username: str\n    email: str\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n@app.post()\ndef create_user_item(\n    user: User,\n    item: Item\n):\n    return {\"user\": user, \"item\": item}\n# POST https://example.com/api/method/my_app.api.v1.create_user_item\n# Request Body:\n# {\n#     \"user\": {\n#         \"username\": \"john_doe\",\n#         \"email\": \"john@example.com\"\n#     },\n#     \"item\": {\n#         \"name\": \"Laptop\",\n#         \"price\": 999.99\n#     }\n# }\n# Response: Same as request body\n</code></pre>"},{"location":"usage_examples/#3-nested-models","title":"3. Nested Models","text":"<p>Use nested Pydantic models for complex data:</p> <pre><code>class Image(BaseModel):\n    url: HttpUrl\n    name: str\n\nclass Product(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: List[str] = []\n    images: List[Image]\n\n@app.post()\ndef create_product(product: Product):\n    return product\n# POST https://example.com/api/method/my_app.api.v1.create_product\n# Request Body:\n# {\n#     \"name\": \"Awesome Laptop\",\n#     \"description\": \"Best laptop ever\",\n#     \"price\": 999.99,\n#     \"tags\": [\"electronics\", \"computers\"],\n#     \"images\": [\n#         {\n#             \"url\": \"https://example.com/img1.jpg\",\n#             \"name\": \"Front View\"\n#         },\n#         {\n#             \"url\": \"https://example.com/img2.jpg\",\n#             \"name\": \"Side View\"\n#         }\n#     ]\n# }\n# Response: Same as request body\n</code></pre>"},{"location":"usage_examples/#4-body-with-extra-fields","title":"4. Body with Extra Fields","text":"<p>Control how extra fields are handled:</p> <pre><code>class StrictItem(BaseModel):\n    model_config = {\"extra\": \"forbid\"}  # Will reject extra fields\n    name: str\n    price: float\n\nclass FlexibleItem(BaseModel):\n    model_config = {\"extra\": \"allow\"}   # Will allow extra fields\n    name: str\n    price: float\n\n@app.post()\ndef create_items(\n    strict: StrictItem,\n    flexible: FlexibleItem\n):\n    return {\"strict\": strict, \"flexible\": flexible}\n# POST https://example.com/api/method/my_app.api.v1.create_items\n# Request Body:\n# {\n#     \"strict\": {\n#         \"name\": \"Laptop\",\n#         \"price\": 999.99\n#         # Extra fields here would cause validation error\n#     },\n#     \"flexible\": {\n#         \"name\": \"Mouse\",\n#         \"price\": 49.99,\n#         \"color\": \"black\",  # Extra field allowed\n#         \"in_stock\": true   # Extra field allowed\n#     }\n# }\n</code></pre>"},{"location":"usage_examples/#5-body-with-field-validation","title":"5. Body with Field Validation","text":"<p>Add validation rules to fields:</p> <pre><code>class Product(BaseModel):\n    name: str = Field(\n        ...,\n        min_length=3,\n        max_length=50,\n        description=\"Product name\"\n    )\n    price: float = Field(\n        ...,\n        gt=0,\n        le=1000000,\n        description=\"Product price in USD\"\n    )\n    sku: str = Field(\n        ...,\n        pattern=\"^[A-Z]{2}-[0-9]{4}$\",\n        description=\"Stock keeping unit (e.g., AB-1234)\"\n    )\n    tags: List[str] = Field(\n        default=[],\n        max_items=5,\n        description=\"Product tags\"\n    )\n\n@app.post()\ndef create_product(product: Product):\n    return product\n# POST https://example.com/api/method/my_app.api.v1.create_product\n# Request Body:\n# {\n#     \"name\": \"Gaming Laptop\",\n#     \"price\": 1299.99,\n#     \"sku\": \"LP-1234\",\n#     \"tags\": [\"electronics\", \"gaming\"]\n# }\n</code></pre>"},{"location":"usage_examples/#6-body-with-computed-fields","title":"6. Body with Computed Fields","text":"<p>Include computed fields in your models:</p> <pre><code>class Order(BaseModel):\n    items: List[str]\n    unit_price: float = Field(..., gt=0)\n    quantity: int = Field(..., gt=0)\n\n    @property\n    def total_price(self) -&gt; float:\n        return self.unit_price * self.quantity\n\n    @property\n    def item_count(self) -&gt; int:\n        return len(self.items)\n\n@app.post()\ndef create_order(order: Order):\n    return {\n        **order.model_dump(),\n        \"total_price\": order.total_price,\n        \"item_count\": order.item_count\n    }\n# POST https://example.com/api/method/my_app.api.v1.create_order\n# Request Body:\n# {\n#     \"items\": [\"laptop\", \"mouse\", \"keyboard\"],\n#     \"unit_price\": 999.99,\n#     \"quantity\": 2\n# }\n# Response:\n# {\n#     \"items\": [\"laptop\", \"mouse\", \"keyboard\"],\n#     \"unit_price\": 999.99,\n#     \"quantity\": 2,\n#     \"total_price\": 1999.98,\n#     \"item_count\": 3\n# }\n</code></pre>"},{"location":"usage_examples/#7-form-data","title":"7. Form Data","text":"<p>Handle form data submissions:</p> <pre><code>from fastapi import Form\n\n@app.post()\ndef create_user_profile(\n    username: Annotated[str, Form()],\n    email: Annotated[str, Form()],\n    password: Annotated[str, Form()],\n    bio: Annotated[str | None, Form()] = None\n):\n    return {\n        \"username\": username,\n        \"email\": email,\n        \"bio\": bio\n    }\n# POST https://example.com/api/method/my_app.api.v1.create_user_profile\n# Content-Type: application/x-www-form-urlencoded\n# Form Data:\n#   username=johndoe\n#   email=john@example.com\n#   password=secretpass\n#   bio=Hello World\n</code></pre>"},{"location":"usage_examples/#file-uploads","title":"File Uploads","text":"<p>FrappeAPI provides two approaches for handling file uploads, optimized for different use cases:</p>"},{"location":"usage_examples/#1-small-files-in-memory","title":"1. Small Files (In-Memory)","text":"<p>For small files, use <code>File()</code> which loads the entire file into memory:</p> <pre><code>from typing import Annotated\nfrom frappeapi import File, Form\n\n@app.post()\ndef upload_document(\n    file: Annotated[bytes, File()],\n    description: Annotated[str | None, Form()] = None\n):\n    content = len(file)  # File content is available as bytes\n    return {\n        \"file_size\": content,\n        \"description\": description\n    }\n# POST https://example.com/api/method/my_app.api.v1.upload_document\n# Content-Type: multipart/form-data\n# Form Data:\n#   file=@small_doc.pdf\n#   description=Small document\n</code></pre>"},{"location":"usage_examples/#2-large-files-streamed","title":"2. Large Files (Streamed)","text":"<p>For large files, use <code>UploadFile</code> which streams the file and provides more metadata:</p> <pre><code>from frappeapi import UploadFile\n\n@app.post()\ndef upload_large_file(\n    file: UploadFile,\n    chunk_size: Annotated[int, Form()] = 8192\n):\n    # Access file metadata\n    file_info = {\n        \"filename\": file.filename,\n        \"content_type\": file.content_type,\n        \"size\": 0\n    }\n\n    # Access the raw Python file object for non-async operations\n    while chunk := file.file.read(chunk_size):\n        file_info[\"size\"] += len(chunk)\n        # Process chunk here...\n\n    return file_info\n# POST https://example.com/api/method/my_app.api.v1.upload_large_file\n# Content-Type: multipart/form-data\n# Form Data:\n#   file=@large_video.mp4\n#   chunk_size=8192\n</code></pre> <p>Note: Optional file uploads, multiple file uploads, and multiple <code>UploadFile</code> fields are not yet supported.</p>"},{"location":"usage_examples/#response-models-and-return-types","title":"Response Models and Return Types","text":"<p>FrappeAPI provides several ways to define and control response data. Response models can be defined using return type annotations or the <code>response_model</code> parameter (which takes priority if both are used). Response models automatically filter and validate the returned data to match the defined schema.</p>"},{"location":"usage_examples/#1-basic-response-model","title":"1. Basic Response Model","text":"<p>Use Pydantic models to define response structure:</p> <pre><code>from pydantic import BaseModel\n\nclass UserResponse(BaseModel):\n    id: int\n    username: str\n    email: str\n    is_active: bool = True\n\n@app.get(response_model=UserResponse)  # Will filter response to match UserResponse\ndef get_user(user_id: int) -&gt; UserResponse:  # Return type provides IDE support\n    return {\n        \"id\": user_id,\n        \"username\": \"john_doe\",\n        \"email\": \"john@example.com\",\n        \"is_active\": True,\n        \"password\": \"secret\",  # Will be filtered out from response\n        \"role\": \"admin\"       # Will be filtered out from response\n    }\n# GET https://example.com/api/method/my_app.api.v1.get_user?user_id=123\n# Response: {\n#     \"id\": 123,\n#     \"username\": \"john_doe\",\n#     \"email\": \"john@example.com\",\n#     \"is_active\": true\n# }\n</code></pre>"},{"location":"usage_examples/#2-list-response-model","title":"2. List Response Model","text":"<p>Handle list responses with type validation:</p> <pre><code>class Product(BaseModel):\n    id: int\n    name: str\n    price: float\n\n@app.get(response_model=List[Product])\ndef list_products(category: str = \"all\"):\n    return [\n        {\"id\": 1, \"name\": \"Laptop\", \"price\": 999.99},\n        {\"id\": 2, \"name\": \"Mouse\", \"price\": 24.99},\n        {\"id\": 3, \"name\": \"Keyboard\", \"price\": 49.99}\n    ]\n# GET https://example.com/api/method/my_app.api.v1.list_products?category=all\n# Response: [\n#     {\"id\": 1, \"name\": \"Laptop\", \"price\": 999.99},\n#     {\"id\": 2, \"name\": \"Mouse\", \"price\": 24.99},\n#     {\"id\": 3, \"name\": \"Keyboard\", \"price\": 49.99}\n# ]\n</code></pre>"},{"location":"usage_examples/#error-handling","title":"Error Handling","text":"<p>FrappeAPI provides built-in exception handlers and allows you to customize error handling.</p>"},{"location":"usage_examples/#1-built-in-exception-handlers","title":"1. Built-in Exception Handlers","text":"<p>FrappeAPI includes default handlers for common exceptions:</p> <pre><code>from frappeapi.exceptions import HTTPException, RequestValidationError, ResponseValidationError\n\n@app.get()\ndef get_item(item_id: int):\n    if item_id &lt; 0:\n        raise HTTPException(status_code=400, detail=\"Item ID must be positive\")\n    if item_id &gt; 1000:\n        raise HTTPException(\n            status_code=400, \n            detail=\"Item ID too large\",\n            headers={\"X-Error\": \"INVALID_ID\"}\n        )\n    return {\"id\": item_id}\n# GET https://example.com/api/method/my_app.api.v1.get_item?item_id=-1\n# Response (400): {\n#     \"detail\": \"Item ID must be positive\"\n# }\n</code></pre>"},{"location":"usage_examples/#2-custom-exception-handlers","title":"2. Custom Exception Handlers","text":"<p>You can add handlers for your own exceptions:</p> <pre><code>class ItemNotFound(Exception):\n    def __init__(self, item_id: int):\n        self.item_id = item_id\n\n@app.exception_handler(ItemNotFound)\ndef item_not_found_handler(request: Request, exc: ItemNotFound):\n    return JSONResponse(\n        status_code=404,\n        content={\n            \"error\": \"ITEM_NOT_FOUND\",\n            \"detail\": f\"Item {exc.item_id} not found\",\n        }\n    )\n\n@app.get()\ndef get_item(item_id: int):\n    if item_id == 404:\n        raise ItemNotFound(item_id)\n    return {\"id\": item_id}\n# GET https://example.com/api/method/my_app.api.v1.get_item?item_id=404\n# Response (404): {\n#     \"error\": \"ITEM_NOT_FOUND\",\n#     \"detail\": \"Item 404 not found\"\n# }\n</code></pre>"},{"location":"usage_examples/#3-override-default-handlers","title":"3. Override Default Handlers","text":"<p>You can override the default exception handlers:</p> <pre><code>@app.exception_handler(RequestValidationError)\ndef validation_error_handler(request: Request, exc: RequestValidationError):\n    return JSONResponse(\n        status_code=422,\n        content={\n            \"error\": \"VALIDATION_ERROR\",\n            \"details\": [\n                {\n                    \"field\": e[\"loc\"][-1],\n                    \"message\": e[\"msg\"]\n                }\n                for e in exc.errors()\n            ]\n        }\n    )\n\n@app.post()\ndef create_item(item: Item):\n    return item\n# POST https://example.com/api/method/my_app.api.v1.create_item\n# Request Body: {\"price\": \"invalid\"}\n# Response (422): {\n#     \"error\": \"VALIDATION_ERROR\",\n#     \"details\": [\n#         {\n#             \"field\": \"price\",\n#             \"message\": \"value is not a valid float\"\n#         }\n#     ]\n# }\n</code></pre>"},{"location":"usage_examples/#field-validation-and-metadata","title":"Field Validation and Metadata","text":"<p>FrappeAPI supports various field validations and metadata annotations:</p>"},{"location":"usage_examples/#1-string-validations","title":"1. String Validations","text":"<pre><code>from pydantic import BaseModel, Field\n\nclass Product(BaseModel):\n    name: str = Field(\n        min_length=3,\n        max_length=50,\n        pattern=\"^[a-zA-Z0-9-_ ]+$\",  # Only alphanumeric, space, hyphen and underscore\n        description=\"Product name (3-50 chars, alphanumeric)\"\n    )\n    sku: str = Field(\n        pattern=\"^[A-Z]{2}-[0-9]{4}$\",  # Format: XX-0000\n        description=\"Stock keeping unit (e.g., AB-1234)\"\n    )\n\n@app.post()\ndef create_product(product: Product):\n    return product\n# POST https://example.com/api/method/my_app.api.v1.create_product\n# Request Body: {\"name\": \"A\", \"sku\": \"invalid\"}\n# Response (422): {\n#     \"detail\": [\n#         {\n#             \"type\": \"string_too_short\",\n#             \"loc\": [\"body\", \"name\"],\n#             \"msg\": \"String should have at least 3 characters\"\n#         },\n#         {\n#             \"type\": \"string_pattern_mismatch\",\n#             \"loc\": [\"body\", \"sku\"],\n#             \"msg\": \"String should match pattern '^[A-Z]{2}-[0-9]{4}$'\"\n#         }\n#     ]\n# }\n</code></pre>"},{"location":"usage_examples/#2-numeric-validations","title":"2. Numeric Validations","text":"<pre><code>class Order(BaseModel):\n    quantity: int = Field(gt=0, le=100, description=\"Order quantity (1-100)\")\n    unit_price: float = Field(gt=0, le=1000000, description=\"Price in USD\")\n    discount_percent: float = Field(ge=0, le=100, description=\"Discount percentage\")\n\n@app.post()\ndef create_order(order: Order):\n    return order\n# POST https://example.com/api/method/my_app.api.v1.create_order\n# Request Body: {\"quantity\": 0, \"unit_price\": -10, \"discount_percent\": 101}\n# Response (422): {\n#     \"detail\": [\n#         {\n#             \"type\": \"greater_than\",\n#             \"loc\": [\"body\", \"quantity\"],\n#             \"msg\": \"Input should be greater than 0\"\n#         },\n#         {\n#             \"type\": \"greater_than\",\n#             \"loc\": [\"body\", \"unit_price\"],\n#             \"msg\": \"Input should be greater than 0\"\n#         },\n#         {\n#             \"type\": \"less_than_equal\",\n#             \"loc\": [\"body\", \"discount_percent\"],\n#             \"msg\": \"Input should be less than or equal to 100\"\n#         }\n#     ]\n# }\n</code></pre>"},{"location":"usage_examples/#3-api-metadata","title":"3. API Metadata","text":"<p>Add metadata to your API endpoints:</p> <pre><code>from typing import Annotated\nfrom frappeapi import Query\n\n@app.get(\n    description=\"Retrieve product details by ID\",\n    summary=\"Get Product\",\n    include_in_schema=True,\n    tags=[\"Products\"]\n)\ndef get_product(\n    product_id: Annotated[int, Query(\n        title=\"Product ID\",\n        description=\"Unique identifier for the product\",\n        gt=0\n    )]\n):\n    return {\"id\": product_id}\n# This metadata will be visible in the API documentation at /docs\n</code></pre>"},{"location":"usage_examples/#header-parameters","title":"Header Parameters","text":"<p>FrappeAPI supports header parameters in your API endpoints. Header parameters are automatically converted from hyphen to underscore:</p> <pre><code>from typing import Annotated\nfrom frappeapi import Header\n\n@app.get()\ndef get_user_info(\n    user_agent: Annotated[str, Header()],      # Will read from User-Agent\n    x_custom_header: Annotated[str, Header()]  # Will read from X-Custom-Header\n):\n    return {\n        \"user_agent\": user_agent,\n        \"custom_header\": x_custom_header\n    }\n# GET https://example.com/api/method/my_app.api.v1.get_user_info\n# Headers:\n#   User-Agent: Mozilla/5.0\n#   X-Custom-Header: custom-value\n# Response: {\n#     \"user_agent\": \"Mozilla/5.0\",\n#     \"custom_header\": \"custom-value\"\n# }\n</code></pre> <p>Note: Currently, header parameters as Pydantic models, duplicate headers, and forbidding extra headers are not supported.</p>"}]}